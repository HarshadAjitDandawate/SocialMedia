<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Report: <%= report.name %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/papaparse@5.3.0/papaparse.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
  </head>
  <body class="bg-gray-50">
    <div class="w-64 h-screen bg-white shadow-md fixed top-0 left-0">
      <%- include('layouts/sidebar') %>
    </div>

    <div class="flex-1 ml-64 p-10 overflow-y-auto">
      <div class="container mx-auto max-w-6xl">
        <header class="mb-8 flex justify-between items-center">
          <h1 class="text-4xl font-bold text-gray-800">Data Analysis Report</h1>
          <a
            href="/quick-report"
            class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 ease-in-out"
          >
            &larr; Back to Quick Report
          </a>
        </header>

        <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
          <h2 class="text-3xl font-bold mb-4 text-gray-800">
            <%= report.name %>
          </h2>
          <p class="text-lg text-gray-600 mb-4"><%= report.description %></p>
        </div>

        <div id="report" class="space-y-12">
          <section>
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">
              Univariate Analysis
            </h2>
            <div class="bg-white rounded-lg shadow-lg overflow-hidden">
              <div class="overflow-x-auto">
                <table class="min-w-full">
                  <thead class="bg-gray-100">
                    <tr>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Column Name
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Type
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Unique Values
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Missing Values
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Min
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Max
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Mean
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Median
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Mode
                      </th>
                      <th
                        class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider"
                      >
                        Std Dev
                      </th>
                    </tr>
                  </thead>
                  <tbody
                    id="univariateAnalysis"
                    class="bg-white divide-y divide-gray-200"
                  ></tbody>
                </table>
              </div>
            </div>
          </section>

          <section>
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">
              Bivariate Analysis
            </h2>
            <div class="bg-white rounded-lg shadow-lg p-6">
              <div class="grid grid-cols-3 gap-6 mb-6">
                <div>
                  <label
                    for="x-axis"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >X-Axis</label
                  >
                  <select
                    id="x-axis"
                    class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                  ></select>
                </div>
                <div>
                  <label
                    for="y-axis"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >Y-Axis</label
                  >
                  <select
                    id="y-axis"
                    class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                  ></select>
                </div>
                <div>
                  <label
                    for="color"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >Color</label
                  >
                  <select
                    id="color"
                    class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                  >
                    <option value="">None</option>
                  </select>
                </div>
              </div>
              <div id="scatter-plot" class="w-full h-[600px]"></div>
            </div>
          </section>

          <section>
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">
              Correlation Analysis
            </h2>
            <div class="bg-white rounded-lg shadow-lg p-6">
              <div class="mb-6">
                <label
                  for="correlation-method"
                  class="block text-sm font-medium text-gray-700 mb-1"
                  >View Method</label
                >
                <select
                  id="correlation-method"
                  class="w-48 rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                >
                  <option value="heatmap">Heatmap</option>
                  <option value="table">Table</option>
                </select>
              </div>
              <div id="correlation-heatmap" class="w-full h-[600px]"></div>
              <div id="correlation-table" class="overflow-x-auto hidden">
                <table class="min-w-full bg-white">
                  <thead class="bg-gray-100">
                    <tr id="correlation-table-headers"></tr>
                  </thead>
                  <tbody id="correlation-table-body"></tbody>
                </table>
              </div>
            </div>
          </section>

          <section>
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">
              Data Distribution
            </h2>
            <div
              id="dataDistribution"
              class="bg-white rounded-lg shadow-lg p-6 grid grid-cols-2 gap-4"
            ></div>
          </section>

          <section>
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">
              Outlier Analysis
            </h2>
            <div
              id="outlierAnalysis"
              class="bg-white rounded-lg shadow-lg p-2 grid grid-cols-2 gap-2"
            ></div>
          </section>
        </div>
      </div>
    </div>

    <script>
              let data = <%- JSON.stringify(report.data) %>;
              let columns = Object.keys(data[0]);
              let numericColumns = [];
              let categoricalColumns = [];
              let correlationMatrix = [];

              function initializeData() {
                  columns.forEach(col => {
                      if (!isNaN(data[0][col])) {
                          numericColumns.push(col);
                      } else {
                          categoricalColumns.push(col);
                      }
                  });
              }

              function generateUnivariateAnalysis() {
                  const analysisTableBody = document.getElementById("univariateAnalysis");
                  analysisTableBody.innerHTML = "";

                  columns.forEach(col => {
                      const values = data.map(row => row[col]);
                      const isNumeric = !isNaN(values[0]);

                      let stats = {
                          name: col,
                          type: isNumeric ? "numeric" : "categorical",
                          uniqueCount: new Set(values).size,
                          missingCount: values.filter(v => v === "").length,
                      };

                      if (isNumeric) {
                          const numericValues = values.map(Number).filter(v => !isNaN(v));
                          stats.min = Math.min(...numericValues);
                          stats.max = Math.max(...numericValues);
                          stats.mean = numericValues.reduce((a, b) => a + b, 0) / numericValues.length;
                          stats.median = calculateMedian(numericValues);
                          stats.mode = calculateMode(numericValues);
                          stats.stdDev = calculateStandardDeviation(numericValues);
                      } else {
                          stats.topCategories = calculateTopCategories(values);
                      }

                      const row = document.createElement("tr");
                      row.className = "bg-white border-b";

                      row.innerHTML = `
                          <td class="px-4 py-2 text-sm text-gray-700">${stats.name}</td>
                          <td class="px-4 py-2 text-sm text-gray-700">${stats.type}</td>
                          <td class="px-4 py-2 text-sm text-gray-700">${stats.uniqueCount}</td>
                          <td class="px-4 py-2 text-sm text-gray-700">${stats.missingCount}</td>
                          ${isNumeric
                              ? `
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.min.toFixed(2)}</td>
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.max.toFixed(2)}</td>
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.mean.toFixed(2)}</td>
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.median.toFixed(2)}</td>
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.mode.toFixed(2)}</td>
                              <td class="px-4 py-2 text-sm text-gray-700">${stats.stdDev.toFixed(2)}</td>
                          `
                              : `
                              <td colspan="9" class="px-4 py-2 text-sm text-gray-700">
                                  Top categories: ${stats.topCategories.map(c => `${c[0]} (${c[1]})`).join(', ')}
                              </td>
                          `
                          }
                      `;
                      analysisTableBody.appendChild(row);
                  });
              }

              function calculateMedian(numbers) {
                  const sorted = numbers.slice().sort((a, b) => a - b);
                  const middle = Math.floor(sorted.length / 2);
                  if (sorted.length % 2 === 0) {
                      return (sorted[middle - 1] + sorted[middle]) / 2;
                  }
                  return sorted[middle];
              }

              function calculateMode(numbers) {
                  const counts = {};
                  let maxCount = 0;
                  let mode = null;
                  numbers.forEach(num => {
                      counts[num] = (counts[num] || 0) + 1;
                      if (counts[num] > maxCount) {
                          maxCount = counts[num];
                          mode = num;
                      }
                  });
                  return mode;
              }

              function calculateStandardDeviation(numbers) {
                  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;
                  const squareDiffs = numbers.map(value => Math.pow(value - mean, 2));
                  const avgSquareDiff = squareDiffs.reduce((a, b) => a + b, 0) / squareDiffs.length;
                  return Math.sqrt(avgSquareDiff);
              }

              function calculatePercentile(numbers, percentile) {
                  const sorted = numbers.slice().sort((a, b) => a - b);
                  const index = (percentile / 100) * (sorted.length - 1);
                  const lower = Math.floor(index);
                  const upper = Math.ceil(index);
                  const weight = index % 1;
                  return sorted[lower] * (1 - weight) + sorted[upper] * weight;
              }

              function calculateTopCategories(values) {
                  const counts = {};
                  values.forEach(value => {
                      counts[value] = (counts[value] || 0) + 1;
                  });
                  return Object.entries(counts)
                      .sort((a, b) => b[1] - a[1])
                      .slice(0, 3);
              }

              function setupBivariateControls() {
                  const xAxisSelect = document.getElementById("x-axis");
                  const yAxisSelect = document.getElementById("y-axis");
                  const colorSelect = document.getElementById("color");

                  xAxisSelect.innerHTML = yAxisSelect.innerHTML = colorSelect.innerHTML=numericColumns
                      .map(col => `<option value="${col}">${col}</option>`)
                      .join("");

                  colorSelect.innerHTML +=  categoricalColumns.map(col => `<option value="${col}">${col}</option>`)
                    .join("");

              }

              function updateScatterPlot() {
                  const xAxis = document.getElementById("x-axis").value;
                  const yAxis = document.getElementById("y-axis").value;
                  const color = document.getElementById("color").value;

                  if (!xAxis || !yAxis) return;
      const traces = color
                      ? _.groupBy(data, row => row[color])
                      : { "All Data": data };

                  const plotData = Object.keys(traces).map(group => ({
                      x: traces[group].map(row => Number(row[xAxis])),
                      y: traces[group].map(row => Number(row[yAxis])),
                      mode: "markers",
                      name: group,
                      type: "scatter",
                  }));

                  Plotly.newPlot("scatter-plot", plotData, {
                      title: `${xAxis} vs ${yAxis}`,
                      xaxis: { title: xAxis },
                      yaxis: { title: yAxis },
                  });
              }

              function generateCorrelationHeatmap() {
                  const numericData = data.map(row => {
                      let obj = {};
                      numericColumns.forEach(col => (obj[col] = Number(row[col])));
                      return obj;
                  });

                  correlationMatrix = calculateCorrelationMatrix(numericData);
                  updateCorrelation();
              }

              function calculateCorrelationMatrix(data) {
                  const matrix = [];
                  numericColumns.forEach((col1, i) => {
                      matrix[i] = [];
                      numericColumns.forEach((col2, j) => {
                          if (i === j) {
                              matrix[i][j] = 1;
                          } else if (i > j) {
                              matrix[i][j] = matrix[j][i];
                          } else {
                              matrix[i][j] = correlation(
                                  data.map(row => row[col1]),
                                  data.map(row => row[col2])
                              );
                          }
                      });
                  });
                  return matrix;
              }

              function mean(numbers) {
                  const validNumbers = numbers.filter(num => !isNaN(num));
                  if (validNumbers.length === 0) {
                      return 0;
                  }
                  const sum = validNumbers.reduce((acc, num) => acc + num, 0);
                  return sum / validNumbers.length;
              }

              function correlation(x, y) {
                  const n = x.length;
                  const meanX = mean(x);
                  const meanY = mean(y);
                  const covariance = _.sum(x.map((xi, i) => (xi - meanX) * (y[i] - meanY))) / n;
                  const stdDevX = Math.sqrt(_.sum(x.map(xi => Math.pow(xi - meanX, 2))) / n);
                  const stdDevY = Math.sqrt(_.sum(y.map(yi => Math.pow(yi - meanY, 2))) / n);
                  return covariance / (stdDevX * stdDevY);
              }

              function updateCorrelation() {
                  const method = document.getElementById("correlation-method").value;

                  if (method === "heatmap") {
                      const zData = correlationMatrix;

                      Plotly.newPlot(
                          "correlation-heatmap",
                          [{
                              z: zData,
                              x: numericColumns,
                              y: numericColumns,
                              type: "heatmap",
                              colorscale: "Viridis",
                          }],
                          { title: "Correlation Heatmap" }
                      );

                      document.getElementById("correlation-heatmap").classList.remove("hidden");
                      document.getElementById("correlation-table").classList.add("hidden");
                  } else if (method === "table") {
                      const headers = document.getElementById("correlation-table-headers");
                      const body = document.getElementById("correlation-table-body");

                      headers.innerHTML =
                          `<th class="px-4 py-2 text-left text-sm font-semibold text-gray-700"></th>` +
                          numericColumns
                              .map(col => `<th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">${col}</th>`)
                              .join("");

                      body.innerHTML = numericColumns
                          .map((col1, i) => `
                              <tr class="bg-white border-b">
                                  <td class="px-4 py-2 text-sm text-gray-700 font-semibold">${col1}</td>
                                  ${numericColumns
                                      .map((col2, j) => `<td class="px-4 py-2 text-sm text-gray-700">${correlationMatrix[i][j].toFixed(2)}</td>`)
                                      .join("")}
                              </tr>
                          `)
                          .join("");

                      document.getElementById("correlation-heatmap").classList.add("hidden");
                      document.getElementById("correlation-table").classList.remove("hidden");
                  }
              }

              function generateDataDistribution() {
                  numericColumns.forEach(col => {
                      const values = data.map(row => Number(row[col]));
                      const trace = {
                          x: values,
                          type: 'histogram',
                          name: col
                      };
                      const layout = {
                          title: `Distribution of ${col}`,
                          xaxis: { title: col },
                          yaxis: { title: 'Frequency' },
                          width: 400,
                          height: 400
                      };
                      const plotDiv = document.createElement('div');
                      plotDiv.id = `distribution-${col}`;
                      plotDiv.className = 'w-full h-[400px] mb-8';
                      document.getElementById('dataDistribution').appendChild(plotDiv);
                      Plotly.newPlot(`distribution-${col}`, [trace], layout);
                  });
              }

              function generateOutlierAnalysis() {
                  numericColumns.forEach(col => {
                      const values = data.map(row => Number(row[col]));
                      const trace = {
                          y: values,
                          type: 'box',
                          name: col
                      };
                      const layout = {
                          title: `Box Plot for ${col}`,
                          yaxis: { title: col },
                          width: 400,
                          height: 400
                      };
                      const plotDiv = document.createElement('div');
                      plotDiv.id = `boxplot-${col}`;
                      plotDiv.className = 'w-full h-[400px] mb-8';
                      document.getElementById('outlierAnalysis').appendChild(plotDiv);
                      Plotly.newPlot(`boxplot-${col}`, [trace], layout);
                  });
              }

              initializeData();
              generateUnivariateAnalysis();
              setupBivariateControls();
              updateScatterPlot();
              generateCorrelationHeatmap();
              generateDataDistribution();
              generateOutlierAnalysis();

              document.getElementById("x-axis").addEventListener("change", updateScatterPlot);
              document.getElementById("y-axis").addEventListener("change", updateScatterPlot);
              document.getElementById("color").addEventListener("change", updateScatterPlot);
              document.getElementById("correlation-method").addEventListener("change", updateCorrelation);
    </script>
  </body>
</html>
